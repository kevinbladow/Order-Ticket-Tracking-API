package order.tracking.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;
import order.tracking.controller.model.CustomerData;
import order.tracking.controller.model.TicketData;
import order.tracking.service.TicketService;

@RestController
@RequestMapping("/order_tracking")
@Slf4j
public class TicketController {
	
	
	@Autowired
	private TicketService ticketService;
	
	//create and save new customer 
		@PostMapping("/customer")
		@ResponseStatus(code =HttpStatus.CREATED )
		public CustomerData insertCustomerData(@RequestBody CustomerData customerData) {
			log.info("Creating Customer {}", customerData);
			return ticketService.saveCustomerData(customerData);
		}
	
	//Retrieve a customer by Id
		@GetMapping("/customer/{customerId}")
		@ResponseStatus(code = HttpStatus.OK)
		public CustomerData retrieveCustomerById(@PathVariable Long customerId) {
			log.info("Retrieving Customer with ID = {}", customerId);
			return ticketService.retrieveCustomerById(customerId);
		}
		
	// create and save new order ticket or update existing order ticket
		@PostMapping("/customer/{customerId}/ticket")
		@ResponseStatus(code = HttpStatus.CREATED)
		public TicketData addTicket(@PathVariable Long customerId, @RequestBody TicketData ticketData) {
		
		log.info("Adding order ticket {} to Customer {}", ticketData, customerId);
		return ticketService.saveTicket(customerId, ticketData);
		}

	// delete a customer order 
		@DeleteMapping("/ticket/{ticketId}")		
		public Map<String,String> deleteTicketById(@PathVariable Long ticketId){
			
			log.info("Deleting Order Ticket with ID = {}", ticketId);
			ticketService.deleteTicketById(ticketId);
			
			return Map.of("message", "Deletion of order Ticket with ID =" + ticketId + " was successful.");
		}
		
	// modify an existing customer by customer ID
		@PutMapping("/customer/{customerId}")
		@ResponseStatus(code = HttpStatus.OK)
		public CustomerData updateCustomerData(@PathVariable Long customerId, @RequestBody CustomerData customerData) {
			customerData.setCustomerId(customerId);
			
			log.info("Update Customer {}", customerId);
			
			return ticketService.saveCustomerData(customerData);
		}
}
